n <- 100
primes <- c(FALSE, rep(TRUE, n-1))
p <- 2L
seq.int(2L*p, n, p)
primes[seq.int(2L*p, n, p)]
primes[seq.int(2L*p, n, p)] <- FALSE
which(primes)
which(primes > p)
which(primes) > p
sqrt(50)
floor(sqrt(50))
max_p <- floor(sqrt(n))
n <- 100
primes <- c(FALSE, rep(TRUE, n-1))
max_p <- floor(sqrt(n))
p <- 2L
primes[seq.int(2L*p, n, p)] <- FALSE
primes[p+1:]
primes[p+1:n]
which(primes)
subset(which(primes), which(primes) > p)
min(subset(which(primes), which(primes) > p))
p <- min(subset(which(primes), which(primes) > p))
primes[seq.int(2L*p, n, p)] <- FALSE
p <- min(subset(which(primes), which(primes) > p))
primes[seq.int(2L*p, n, p)] <- FALSE
p <- min(subset(which(primes), which(primes) > p))
primes[seq.int(2L*p, n, p)] <- FALSE
p <- min(subset(which(primes), which(primes) > p))
which(primes)
as.integer(9.1)
primes <- function(n) {
n <- as.integer(n)
primes <- c(FALSE, rep(TRUE, n-1))
max_p <- floor(sqrt(n))
p <- 2L
while(p < max_p) {
primes[seq.int(2L*p, n, p)] <- FALSE
p <- min(subset(which(primes), which(primes) > p))
}
which(primes)
}
primes(100)
primes(1000)
thou <-
primes(1000)
sqrt(1000)
primes <- function(n) {
n <- as.integer(n)
primes <- c(FALSE, rep(TRUE, n-1))
max_p <- floor(sqrt(n))
p <- 2L
while(p <= max_p) {
primes[seq.int(2L*p, n, p)] <- FALSE
p <- min(subset(which(primes), which(primes) > p))
}
which(primes)
}
thou <-
primes(1000)
thou <-
primes(5000)
num <- 600851475143
primes <- function(n) {
n <- as.integer(n)
primes <- c(FALSE, rep(TRUE, n-1))
max_p <- floor(sqrt(n))
p <- 2L
while(p <= max_p) {
primes[seq.int(2L*p, n, p)] <- FALSE
p <- min(subset(which(primes), which(primes) > p))
}
which(primes)
}
num <- 600851475143
prim <-
primes(num/2)
num/2
primes(500)
primes(500.5)
primes(num/2)
n <- num/2
n <- as.integer(n)
n <- num/2
primes <- function(n) {
n <- floor(n)
primes <- c(FALSE, rep(TRUE, n-1))
max_p <- floor(sqrt(n))
p <- 2L
while(p <= max_p) {
primes[seq.int(2L*p, n, p)] <- FALSE
p <- min(subset(which(primes), which(primes) > p))
}
which(primes)
}
x <-
primes(num/2)
x <-
primes(100000)
x <-
primes(1000000)
sqrt(num)
x <-
primes(sqrt(num))
num %% 1:4
num %% 1:10
num %% x
num %% x == 0
which(num %% x == 0)
x[which(num %% x == 0)]
num / 71
num / 6857
71*839*1471*6857
num <- 14
x <- primes(sqrt(num))
x[which(num %% x == 0)]
factors <- x[which(num %% x == 0)]
prod(1:3)
num / prod(factors)
primes(sqrt(7))
num <- 7
x <- primes(sqrt(num))
x[which(num %% x == 0)]
num <- 14
x <- primes(sqrt(num))
factors <- x[which(num %% x == 0)]
num <- 14
x <- primes(sqrt(num))
factors <- x[which(num %% x == 0)]
newnum <- num/prod(factors)
num <- 14L
x <- primes(sqrt(num))
factors <- x[which(num %% x == 0)]
newnum <- num/prod(factors)
x <- primes(sqrt(newnum))
x[which(newnum %% x == 0)]
newfactors <- x[which(newnum %% x == 0)]
length(newfactors)
length(newfactors) == 0
num <- 14L
x <- primes(sqrt(num))
factors <- x[which(num %% x == 0)]
while(num / prod(factors) > 1) {
newnum <- num/prod(factors)
x <- primes(sqrt(newnum))
newfactors <- x[which(newnum %% x == 0)]
if(length(newfactors) == 0) {
factors <- c(factors, newnum)
} else factors <- c(factors, newfactors)
}
num <- 100
x <- primes(sqrt(num))
factors <- x[which(num %% x == 0)]
while(num / prod(factors) > 1) {
newnum <- num/prod(factors)
x <- primes(sqrt(newnum))
newfactors <- x[which(newnum %% x == 0)]
if(length(newfactors) == 0) {
factors <- c(factors, newnum)
} else factors <- c(factors, newfactors)
}
num <- 100
x <- primes(sqrt(num))
factors <- x[which(num %% x == 0)]
num / prod(factors)
reorder(4:1)
sort(4:1)
sort(factors)
num <- 100
x <- primes(sqrt(num))
factors <- x[which(num %% x == 0)]
while(num / prod(factors) > 1) {
newnum <- num/prod(factors)
x <- primes(sqrt(newnum))
newfactors <- x[which(newnum %% x == 0)]
if(length(newfactors) == 0) {
factors <- c(factors, newnum)
} else factors <- c(factors, newfactors)
}
sort(factors)
num <- 600851475143
x <- primes(sqrt(num))
factors <- x[which(num %% x == 0)]
while(num / prod(factors) > 1) {
newnum <- num/prod(factors)
x <- primes(sqrt(newnum))
newfactors <- x[which(newnum %% x == 0)]
if(length(newfactors) == 0) {
factors <- c(factors, newnum)
} else factors <- c(factors, newfactors)
}
sort(factors)
primes <- function(n) {
n <- floor(n)
primes <- c(FALSE, rep(TRUE, n-1))
max_p <- floor(sqrt(n))
p <- 2L
while(p <= max_p) {
primes[seq.int(2L*p, n, p)] <- FALSE
p <- min(subset(which(primes), which(primes) > p))
}
which(primes)
}
euler_three <- function(n = 600851475143) {
primenums <- primes(sqrt(n))
factors <- primenums[which(n %% primenums == 0)]
while(n / prod(factors) > 1) {
newnum <- n/prod(factors)
primenums <- primes(sqrt(newnum))
newfactors <- primenums[which(newnum %% primenums == 0)]
if(length(newfactors) == 0) {
factors <- c(factors, newnum)
} else factors <- c(factors, newfactors)
}
sort(factors)
}
euler_three()
primes <- function(n) {
n <- floor(n)
primes <- c(FALSE, rep(TRUE, n-1))
max_p <- floor(sqrt(n))
p <- 2L
while(p <= max_p) {
primes[seq.int(2L*p, n, p)] <- FALSE
p <- min(subset(which(primes), which(primes) > p))
}
which(primes)
}
euler_three <- function(n = 600851475143) {
primenums <- primes(sqrt(n))
factors <- primenums[which(n %% primenums == 0)]
while(n / prod(factors) > 1) {
newnum <- n/prod(factors)
primenums <- primes(sqrt(newnum))
newfactors <- primenums[which(newnum %% primenums == 0)]
if(length(newfactors) == 0) {
factors <- c(factors, newnum)
} else factors <- c(factors, newfactors)
}
max(factors)
}
euler_three()
